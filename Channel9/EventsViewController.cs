// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Channel9.Core.Model;
using Channel9.Core.Services;
using Foundation;
using UIKit;
using System.Linq;

namespace Channel9
{
	public partial class EventsViewController : UICollectionViewController
	{
		public EventsViewController (IntPtr handle) : base (handle)
		{
		}

        public Dictionary<String, List<Event>> Data { get; set; } = new Dictionary<string, List<Event>>();

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            CollectionView.DataSource = new EventsDataSource(this);
            LoadData();
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
			if (segue.Identifier == "ShowSessions")
			{
                var ec = (sender as EventCell);
				var indexPath = (this.CollectionView.IndexPathForCell(ec));
				var key = Data.Keys.ElementAt(indexPath.Section);
				var data = Data[key];
                var currentEvent = data[indexPath.Row];
                var svc = (segue.DestinationViewController as SessionsViewController);
                svc.CurrentEvent = currentEvent;
			}
        }

        private async void LoadData()
        {
            var cs = new ContentService();
            var events = await cs.GetEvents();
            var keys = events.Select(e => e.Status).Distinct();
			Data.Clear();
			foreach (var key in keys)
            {
                Data.Add(key, events.Where(e => e.Status == key).OrderByDescending(e => e.Starts).ToList());
			}
            CollectionView.ReloadData();
        }

		
	}

	public class EventsDataSource : UICollectionViewSource
	{
        private EventsViewController eventsViewController;
		public EventsDataSource(EventsViewController vc)
		{
			eventsViewController = vc;
		}

		public override nint NumberOfSections(UICollectionView collectionView)
		{
			return eventsViewController.Data.Count;
		}

		public override nint GetItemsCount(UICollectionView collectionView, nint section)
		{
			var key = eventsViewController.Data.Keys.ElementAt((int)section);
			return eventsViewController.Data[key].Count;
		}

		public override UICollectionViewCell GetCell(UICollectionView collectionView, Foundation.NSIndexPath indexPath)
		{
            EventCell ec = collectionView.DequeueReusableCell("EventCell", indexPath) as EventCell;

			var key = eventsViewController.Data.Keys.ElementAt(indexPath.Section);
			var data = eventsViewController.Data[key];
			var entry = data[indexPath.Row];
			ec.Configure(entry);

			return ec;
		}

		public override UICollectionReusableView GetViewForSupplementaryElement(UICollectionView collectionView, Foundation.NSString elementKind, Foundation.NSIndexPath indexPath)
		{
			if (elementKind == "UICollectionElementKindSectionHeader")
			{
				var sgh = collectionView.DequeueReusableSupplementaryView((Foundation.NSString)"UICollectionElementKindSectionHeader", "GroupHeader", indexPath) as SimpleGroupHeader;
				if (sgh != null)
				{
					var key = eventsViewController.Data.Keys.ElementAt(indexPath.Section);
					sgh.Configure(key);
				}
				return sgh;
			}
			return null;
		}
	}
}
