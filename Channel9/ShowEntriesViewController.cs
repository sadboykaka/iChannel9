// This file has been autogenerated from a class added in the UI designer.

using System;
using Channel9.Core.Model;
using Foundation;
using UIKit;
using System.Collections.Generic;
using System.Linq;
using Channel9.Model;
using Channel9.Core.Services;
using System.Text.RegularExpressions;

namespace Channel9
{
    public partial class ShowEntriesViewController : UIViewController
	{
        public Area Show { get; set; }
        public List<Entry> Entries { get; set; } = new List<Entry>();


		public ShowEntriesViewController (IntPtr handle) : base (handle)
		{
		}

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {

			if (segue.Identifier == "ShowEpisode")
			{
                var ec = (sender as EpisodeCell);
                var indexPath = (this.listView.IndexPathForCell(ec));
                var episode = Entries[indexPath.Row];
				var edvc = (segue.DestinationViewController as EntryDetailViewController);
				edvc.Entry = episode;
			}
			
        }

        public override bool ShouldPerformSegue(string segueIdentifier, NSObject sender)
        {
			var ec = (sender as EpisodeCell);
			var indexPath = (this.listView.IndexPathForCell(ec));
			var episode = Entries[indexPath.Row];
            return episode.HasVideo;
        }

        partial void playButtonTapped(Foundation.NSObject sender)
        {
			if (FavoritesService.Shows.Any(s => s.ID == Show.ID))
			{
                if(FavoritesService.RemoveFavoriteShow(Show)) playButton.SetTitle("Favorite",UIControlState.Normal);
            } else {
                if(FavoritesService.AddFavoriteShow(Show)) playButton.SetTitle("UnFavorite", UIControlState.Normal);
			}
        }

        private Boolean focusListView = true;

        public override IUIFocusEnvironment[] PreferredFocusEnvironments
        {
            get
            {
                var result = focusListView ? new IUIFocusEnvironment[] { listView, playButton } : new IUIFocusEnvironment[] { playButton, listView };
                focusListView = true;
                return result;
            }
        }

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

            this.bannerImage.Alpha = 0;
            this.showTitleLabel.Alpha = 1;

            playButton.Enabled = false;
			
            if (FavoritesService.Shows.Any(s => s.ID == Show.ID))
			{
				playButton.SetTitle("UnFavorite", UIControlState.Normal);
			}
			else
			{
				playButton.SetTitle("Favorite", UIControlState.Normal);
			}

			var gk = new UITapGestureRecognizer( () => {
                focusListView = false;
                SetNeedsFocusUpdate();
                UpdateFocusIfNeeded();
            });
            gk.AllowedPressTypes = new NSNumber[] { (int)UIPressType.LeftArrow, (int)UIPressType.RightArrow };

            var gs = new UISwipeGestureRecognizer(() =>
            {
				focusListView = false;
				SetNeedsFocusUpdate();
				UpdateFocusIfNeeded();
            });
            gs.Direction = UISwipeGestureRecognizerDirection.Right;

            this.listView.AddGestureRecognizer(gk);
            this.listView.AddGestureRecognizer(gs);

            // Perform any additional setup after loading the view, typically from a nib.u
            this.showTitleLabel.Text = Show.DisplayName;
            this.listView.RemembersLastFocusedIndexPath = true;
            this.listView.DataSource = new EntriesDataSource(this);
            this.listView.Delegate = new EntriesDelegate(this);
			
			LoadData();

		}

        private async void LoadData()
        {
            try
            {
                playButton.Enabled = false;
				var cs = new ContentService();
				this.Entries = await cs.GetEntriesByArea(Show.ID);
				this.listView.ReloadData();
                //
                if (!string.IsNullOrEmpty(Show.BannerImage))
                {
					var byteData = await ContentService.DownloadImageArrayAsync(Show.BannerImage);
					this.bannerImage.Image = UIImage.LoadFromData(NSData.FromArray(byteData));
					UIView.Animate( 1, () =>
					{
						showTitleLabel.Alpha = 0;
                        bannerImage.Alpha = 1;
					}, null);
				} 
                //
			}
            finally
            {
				focusListView = true;
				SetNeedsFocusUpdate();
				UpdateFocusIfNeeded();
                playButton.Enabled = true;
			}

		}

        public void Configure(EpisodeCell ec)
        {
            var indexPath = this.listView.IndexPathForCell(ec);
            var episode = Entries[indexPath.Row];
            var ts = TimeSpan.FromSeconds(episode.MediaLengthInSeconds.GetValueOrDefault(0));
            var duration = ts.Hours > 0 ? $"{ts.Hours}:{ts.Minutes.ToString("00")}:{ts.Seconds.ToString("00")}" : $"{ts.Minutes}:{ts.Seconds}";
			ratingLabel.Text = $"Rating: {episode.Rating.ToString("N2")}";
            episodeDescriptionLabel.Text = $"Recorded: {episode.PublishedDate.ToShortDateString()}"; // episode.NoHTMLBody;
			durationLabel.Text = $"Duration: {duration}";
            viewCountLabel.Text = $"Views: {episode.Views}";
            episodeDetailTextView.Text = episode.CleanBody;
        }
	}

    public class EntriesDelegate : UITableViewDelegate
    {
		ShowEntriesViewController showEntriesViewController;
		public EntriesDelegate(ShowEntriesViewController vc)
        {
			showEntriesViewController = vc;
		}

        public override void DidUpdateFocus(UITableView tableView, UITableViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator)
        {
            var ec = (context.NextFocusedItem as EpisodeCell);
            if (ec != null)
            {
                showEntriesViewController.Configure(ec);
            }
        }

        public override NSIndexPath GetIndexPathForPreferredFocusedView(UITableView tableView)
        {
            return NSIndexPath.FromItemSection(0, 0);
        }

    }

    public class EntriesDataSource : UITableViewDataSource
    {
        ShowEntriesViewController showEntriesViewController;
        public EntriesDataSource(ShowEntriesViewController vc)
        {
            showEntriesViewController = vc;
        }
        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            EpisodeCell ec = tableView.DequeueReusableCell("EpisodeCell", indexPath) as EpisodeCell;

            var episode = showEntriesViewController.Entries[indexPath.Row];

			ec.Configure(episode);

			return ec;
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {
            return showEntriesViewController.Entries.Count;
        }
    }
}
