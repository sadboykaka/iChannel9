// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Channel9.Core.Model;
using Channel9.Core.Services;
using Channel9.Model;
using Foundation;
using UIKit;
using System.Linq;

namespace Channel9
{
    public partial class SessionsViewController : UIViewController, IUITableViewDataSource, IUITableViewDelegate
	{
		public SessionsViewController (IntPtr handle) : base (handle)
		{
		}

        private Session SelectedSession;

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier == "ShowSession")
			{
				var edvc = (segue.DestinationViewController as EntryDetailViewController);
                edvc.Entry = SelectedSession;
			}

		}
		
        public Event CurrentEvent { get; set; }

        public List<Session> Sessions { get; private set; } = new List<Session>();
        public List<DateTime> EventDates { get; set; } = new List<DateTime>();

        private async void LoadData()
        {
            titleLabel.Text = CurrentEvent.DisplayName;
            var cs = new ContentService();
            var sessiones = await cs.GetSessions(CurrentEvent);
            Sessions = new List<Session>(sessiones.OrderBy(s => s.Starts));
            EventDates = Sessions.Select(s => s.Starts.GetValueOrDefault().Date).Distinct().ToList();
            tableView.ReloadData();

			if (!string.IsNullOrEmpty(CurrentEvent.BannerImage))
			{
				var byteData = await ContentService.DownloadImageArrayAsync(CurrentEvent.BannerImage);
				this.bannerImage.Image = UIImage.LoadFromData(NSData.FromArray(byteData));
				UIView.Animate(1, () =>
				{
                    titleLabel.Alpha = 0;
					bannerImage.Alpha = 1;
				}, null);
			}
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            tableView.DataSource = this;
            tableView.Delegate = this;

			var gk = new UITapGestureRecognizer(() => {
				focusListView = false;
				SetNeedsFocusUpdate();
				UpdateFocusIfNeeded();
			});
			gk.AllowedPressTypes = new NSNumber[] { (int)UIPressType.LeftArrow, (int)UIPressType.RightArrow };

			var gs = new UISwipeGestureRecognizer(() =>
			{
				focusListView = false;
				SetNeedsFocusUpdate();
				UpdateFocusIfNeeded();
			});
			gs.Direction = UISwipeGestureRecognizerDirection.Right;

			this.tableView.AddGestureRecognizer(gk);
			this.tableView.AddGestureRecognizer(gs);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            LoadData();
        }

		private Boolean focusListView = true;

		public override IUIFocusEnvironment[] PreferredFocusEnvironments
		{
			get
			{
                var result = focusListView ? new IUIFocusEnvironment[] { tableView, descriptionTextView } : new IUIFocusEnvironment[] { descriptionTextView, tableView };
				focusListView = true;
				return result;
			}
		}


		[Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            return EventDates.Count;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            var startDate = EventDates.ElementAt((int)section);
            return Sessions.Count(s => s.Starts.GetValueOrDefault().Date == startDate);
        }

        [Export("tableView:titleForHeaderInSection:")]
        public string TitleForHeader(UITableView tableView, nint section)
        {
			var startDate = EventDates.ElementAt((int)section);
            return startDate.Date.ToLongDateString();
		}

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var startDate = EventDates.ElementAt(indexPath.Section);
            var dateSessions = Sessions.Where(s => s.Starts.GetValueOrDefault().Date == startDate);
            var session = dateSessions.ElementAt(indexPath.Row);
            var sc = tableView.DequeueReusableCell("SessionCell", indexPath) as SessionCell;
            sc.Configure(session);
            return sc;
        }

        [Export("tableView:didUpdateFocusInContext:withAnimationCoordinator:")]
        public void DidUpdateFocus(UITableView tableView, UITableViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator)
        {
            var sc = (context.NextFocusedItem as SessionCell);
            if (sc != null)
            {
				var indexPath = tableView.IndexPathForCell(sc);
				var startDate = EventDates.ElementAt(indexPath.Section);
                var dateSessions = Sessions.Where(s => s.Starts.GetValueOrDefault().Date == startDate);
				var session = dateSessions.ElementAt(indexPath.Row);
				//
				trackLabel.Text = $"Track: {session.Track ?? "-"}";
                startsLabel.Text = $"Starts: {session.Starts.GetValueOrDefault().ToLongTimeString()}";
				descriptionTextView.Text = session.CleanBody;
			}
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            var sc = (tableView.CellAt(indexPath));
			var startDate = EventDates.ElementAt(indexPath.Section);
            var dateSessions = Sessions.Where(s => s.Starts.GetValueOrDefault().Date == startDate);
            SelectedSession = dateSessions.ElementAt(indexPath.Row);
            if (SelectedSession.HasVideo)
            {
                PerformSegue("ShowSession", sc);
			}
        }
    }

}
